from flask import Flask, render_template, redirect, request, jsonify
from os.path import abspath, dirname, join, realpath
from werkzeug.exceptions import HTTPException
from flask.wrappers import Response
import traceback
import json
import requests


dir_path = dirname(realpath(__file__))
app = Flask(__name__, template_folder=join(dir_path, abspath('templates')))

g = {}
IMG_WIDTH = 380
IMG_HEIGHT = 220

TYPES_EXCLUDED = ['relation', 'person', 'date']
CHART_URL = f'https://quickchart.io/chart?w={IMG_WIDTH}&h={IMG_HEIGHT}'
NOTION_API_BASE_URL = "https://api.notion.com/"
NOTION_VERSION = '2022-06-28'


def remove_non_ascii(string):
    return bytes(string, 'utf-8').decode('ascii', 'ignore')


def flatten_row(row):
    res = []

    for field, value in row.items():
        if value and (isinstance(value, list) or (isinstance(value, str) and ',' in value)):
            if not isinstance(value, list):
                value = value.split(',')
            for v in value:
                res += flatten_row({**row, field: v or 'EMPTY'})
        elif value == [] or value == None:
            return flatten_row({**row, field: 'EMPTY'})

    return res or [row]


def clean_data(rows, fields):
    res = []
    rows = [{field: row.get_property(field)
             for field in fields} for row in rows]
    for row in rows:
        res += flatten_row(row)
    return res


def get_datas(collection: str, column_schema: list, notion_bearer_token: str):

    # class Foo:
    #     name = "test"
    #
    # return Foo(), [["xx", "Serie 1"], ["Chien", 10], ["Chat", 15], ["Poule", 30]]
    headers = {"Authorization": f"Bearer {notion_bearer_token}", "Notion-Version": NOTION_VERSION}
    column_names = list(map(lambda x: x.split(":")[0], column_schema))

    # Get propery IDs
    res = requests.get(
        f"{NOTION_API_BASE_URL}v1/databases/{collection}",
        headers=headers,
        verify=False
    ).json()

    property_ids = [res["properties"].get(name).get("id") for name in column_names]

    filter_properties = "&".join([f"filter_properties={name}" for name in property_ids])
    has_more = True
    pages = []
    next_cursor = "null"
    while has_more:
        current = requests.post(
            f"{NOTION_API_BASE_URL}v1/databases/{collection}/query?{filter_properties}",
            headers={"Authorization": f"Bearer {notion_bearer_token}", "Notion-Version": NOTION_VERSION},
            data={"next_cursor": next_cursor},
            verify=False
        ).json()

        pages += current["results"]
        has_more = current.get("has_more", False)
        next_cursor = current.get("next_cursor")
    return pages





@app.errorhandler(Exception)
def handle_error(e):
    """
    Handle and display errors to client.
    Log error traceback.
    """
    code = 500
    if isinstance(e, HTTPException):
        code = e.code
    print(traceback.format_exc())
    return jsonify(error=str(e)), code


@app.route('/schema-chart/<collection>')
def build_schema_chart(collection):
    """
    Schema chart is the interactive chart.
    """
    dark_mode = 'dark' in request.args
    chart_type = request.args.get('t', 'PieChart')
    columns_schema = request.args.get('s', '').split(',')

    cv, datas = get_datas(collection, columns_schema)
    print(datas)

    if request.headers.get('sec-ch-prefers-color-scheme') == 'dark':
        dark_mode = True

    resp = Response(render_template(
        'schema.html',
        dark_mode=dark_mode,
        chart_type=chart_type,
        datas=json.dumps(datas),
        title=request.args.get('title', cv.name),
    ))
    resp.headers['Vary'] = 'Sec-CH-Prefers-Color-Scheme'
    resp.headers['Accept-CH'] = 'Sec-CH-Prefers-Color-Scheme'
    resp.headers['Critical-CH'] = 'Sec-CH-Prefers-Color-Scheme'
    return resp


@app.route('/image-chart/<collection>')
def build_image_chart(collection):
    """
    Return an image chart generated by quickchart.io.
    """
    dark_mode = 'dark' in request.args
    chart_type = request.args.get('t', 'PieChart')
    columns_schema = request.args.get('s', '').split(',')

    _, datas = get_datas(collection, columns_schema)

    force_white_labels = {'legend': {'labels': {'fontColor': 'white'}}}
    labels = list(map(lambda x: remove_non_ascii(x[0]), datas[1:])) # x axis
    datasets = []

    nb_datasets = len(datas[0])

    for index in range(1, nb_datasets):
        datasets.append({
            'label': datas[0][index], # name of the serie / dataset
            'data': list(map(lambda x: x[index], datas[1:]))
        })

    bkg = '%23191919' if dark_mode else 'white'
    data = {
        'type': chart_type.lower().replace('chart', ''),
        'data': {
            'labels': labels,
            'borderWidth': 0,
            'datasets': datasets
        },
        'options': {
            **(force_white_labels if dark_mode else {}),
            'plugins': {'outlabels': {'text': ''}},
            'rotation': 0,
        }
    }

    print(data)

    if request.headers.get('sec-ch-prefers-color-scheme') == 'dark':
        dark_mode = True

    resp = redirect(CHART_URL + f'&bkg={bkg}&c=' + json.dumps(data))
    resp.headers['Vary'] = 'Sec-CH-Prefers-Color-Scheme'
    resp.headers['Accept-CH'] = 'Sec-CH-Prefers-Color-Scheme'
    resp.headers['Critical-CH'] = 'Sec-CH-Prefers-Color-Scheme'
    return resp


if __name__ == '__main__':
    app.run()
